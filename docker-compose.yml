# Docker Compose for ProductInsights Development and Production

version: '3.8'

services:
  # Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-productinsights}
      POSTGRES_USER: ${POSTGRES_USER:-productinsights}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-productinsights123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployments/docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-productinsights}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - productinsights

  # Redis for caching and message queue
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - productinsights

  # Main web application
  web:
    build:
      context: .
      target: ${BUILD_TARGET:-development}
      dockerfile: Dockerfile
    ports:
      - "${WEB_PORT:-5000}:${CONTAINER_PORT:-5000}"
    environment:
      FLASK_ENV: ${FLASK_ENV:-development}
      FLASK_CONFIG: ${FLASK_CONFIG:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-productinsights}:${POSTGRES_PASSWORD:-productinsights123}@db:5432/${POSTGRES_DB:-productinsights}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      OLLAMA_API_URL: ${OLLAMA_API_URL:-http://ollama:11434}
    volumes:
      - .:/app
      - uploads:/app/uploads
      - logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - productinsights
    restart: unless-stopped

  # Celery worker for background tasks
  worker:
    build:
      context: .
      target: worker
      dockerfile: Dockerfile
    environment:
      FLASK_CONFIG: ${FLASK_CONFIG:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-productinsights}:${POSTGRES_PASSWORD:-productinsights123}@db:5432/${POSTGRES_DB:-productinsights}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - productinsights
    restart: unless-stopped

  # Celery beat scheduler
  scheduler:
    build:
      context: .
      target: scheduler
      dockerfile: Dockerfile
    environment:
      FLASK_CONFIG: ${FLASK_CONFIG:-development}
      DATABASE_URL: postgresql://${POSTGRES_USER:-productinsights}:${POSTGRES_PASSWORD:-productinsights123}@db:5432/${POSTGRES_DB:-productinsights}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
    volumes:
      - logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - productinsights
    restart: unless-stopped

  # Ollama for local LLM
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
    networks:
      - productinsights
    restart: unless-stopped

  # Nginx reverse proxy (production only)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployments/docker/nginx.conf:/etc/nginx/nginx.conf
      - ./deployments/docker/ssl:/etc/nginx/ssl
      - logs:/var/log/nginx
    depends_on:
      - web
    networks:
      - productinsights
    restart: unless-stopped
    profiles:
      - production

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - productinsights
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - productinsights
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  productinsights:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  uploads:
  logs:
  prometheus_data:
  grafana_data:
